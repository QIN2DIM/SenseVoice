[tool.poetry]
name = "sense-voice"
version = "0.1.0"
description = ""
authors = ["zhangyx <zhangyx@jhlfund.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.10"
python-dotenv = "^1.0.1"
loguru = "^0.7.2"
httpx = { extras = ["all"], version = "^0.27.0" }
pydantic = "^2.7.3"
fastapi = { extras = ["all"], version = "^0.111.0" }
numpy = "<2.0.0"
torch = [
    { version = "^2.2.1+cu121", source = "pytorch-gpu-src" },
    { platform = "darwin", version = "^2" }
]
torchaudio = [
    { version = "^2.2.1+cu121", source = "pytorch-gpu-src" },
    { platform = "darwin", version = "^2" }
]

funasr = "*"
transformers = "^4.41.2"
huggingface="*"
huggingface_hub="*"
modelscope="*"
pyaudio = "^0.2.14"

#[[tool.poetry.source]]
#name = "tsinghua"
#url = "https://pypi.tuna.tsinghua.edu.cn/simple/"
#priority = "primary"
gradio = "^4.37.2"
funasr-onnx = "^0.3.1"

[[tool.poetry.source]]
name = "jhlfund"
url = "https://jfrog.jhlfund.com/artifactory/api/pypi/py/simple"
priority = "explicit"


[[tool.poetry.source]]
name = "pytorch-gpu-src"
url = "https://download.pytorch.org/whl/cu121"
priority = "explicit"

[tool.poetry.group.dev.dependencies]
black = "*"
pytest = "*"
pytest-asyncio = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/stable/reference/reference.html#configuration-options
testpaths = ["app/tests", "examples"]
asyncio_mode = "auto"
filterwarnings = "ignore::DeprecationWarning"

[tool.black]
line-length = 120
target-version = ["py39", "py310", "py311", "py312"]
skip-magic-trailing-comma = true

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
fix = true
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true